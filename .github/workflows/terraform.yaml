name: terraform

on:
  pull_request:
    paths:
    - 'terraform/**'
#   push:
#     branches:
#       - 'main'
#     paths:
#     - 'terraform/**'

jobs:
  changed_files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: get parent directory and set matrix
        id: set-matrix
        run: |
          # Declare an array of available environments
          declare -a availableEnvs=("staging/global" "staging/lc-staging1" "production/global" "production/eu-bored1" "production/lc-catalog1" "production/lc-production1" "production/us-bored1" "production-devclusters/global" "production-devclusters/eu-devcluster1")

          git diff --name-only HEAD~1 | awk -F "/*[^/]*/*$" '{ print ($1 == "" ? "." : $1); }' | sort | uniq > directories.txt
          #¬†git diff --dirstat=files,0 HEAD~1 | sed 's/^[ 0-9.]\+% //g' > directories1.txt
          
          cat directories.txt
          # cat directories1.txt
          
          tf_config=''

          while IFS= read -r dir
          do
            echo "Processing dir: $dir"
            
            case $dir in
              *staging* | *production* ) 
                echo "Found environment related dir: $dir"
                found_dir=`echo $dir | cut -d "/" -f3,4`
                echo "found_dir: $found_dir";;
              *modules* ) 
                echo "Found a module related dir: $dir"
                continue;;
            esac

            if [[ -z $tf_config ]]; then
              tf_config="{\"tf_config\":\"$found_dir\"}"
            else
              tf_config="$tf_config, {\"tf_config\":\"$found_dir\"}"
            fi
          done < directories.txt

          if [[ -z $tf_config ]]; then # Only modules changed then we should plan everything
            # Iterate the environments array using for loop
            empty=1
            for val in ${availableEnvs[@]}; do
              if [[ $empty == "1" ]]; then
                tf_config="{\"tf_config\":\"$val\"}"
                empty=0
              else 
                tf_config="$tf_config, {\"tf_config\":\"$val\"}"
              fi
            done
          fi

          tf_config="{\"include\":[$tf_config]}"
          echo "::set-output name=matrix::$tf_config"
  
  validate_terraform:
    needs: [changed_files]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.changed_files.outputs.matrix)}}
    steps:
#       - name: Set global environment variables
#         run: |
#           AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}

#           if [[ ${{ matrix.tf_config }} == *"production_devclusters"* ]]; then
#             AWS_ACCESS_KEY_ID=${{ secrets.PRODUCTION_DEVCLUSTERS_AWS_ACCESS_KEY_ID }}
#             AWS_SECRET_ACCESS_KEY=${{ secrets.PRODUCTION_DEVCLUSTERS_AWS_SECRET_ACCESS_KEY }}
#           fi

#           if [[ ${{ matrix.tf_config }} == *"production"* ]]; then
#             AWS_ACCESS_KEY_ID=${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
#             AWS_SECRET_ACCESS_KEY=${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
#           fi

#           echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
#           echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # Wrapper breaks terraform json output
          terraform_wrapper: false
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform/environments/${{ matrix.tf_config }}
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform/environments/${{ matrix.tf_config }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/environments/${{ matrix.tf_config }}
      - name: Terraform Init
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: ./terraform/environments/${{ matrix.tf_config }}
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
